class Solution {
    public int reversePairs(int[] nums) {
        return solve(nums, new int[nums.length], 0, nums.length-1);
    }
    
    public int solve(int[] a, int[] t, int left, int right){
        int ans = 0;
        if(left < right){
            //finding the middle
            int mid = left + (right-left)/2;
            
            //first half
            ans += solve(a, t, left, mid);
            
            //second half
            ans += solve(a, t, mid+1, right);
            
            //now merging both halves
            ans += merge(a, t, left, mid, right);
        }
        
        return ans;
    }
    
    public int merge(int[] a, int[] t, int left, int mid, int right){
        //breaking the array into two parts left, right
        int[] l = Arrays.copyOfRange(a, left, mid+1);
        int[] r = Arrays.copyOfRange(a, mid+1, right+1);
        
        int p = 0, q = 0, ans = 0;
        
        while(p < l.length && q < r.length){
            /*
                Our Main Condition
                every element in l have an index smaller than 
                every element in r, so that condition need not be checked
            */
            if(l[p] > ((long)2*r[q])){
                ans += l.length - p;
                q++;
            }
            else{
                p++;
            }
        }
        
        int i = left;
        int j = mid+1;
        int k = left;
        
        //putting the elements back together in a single array
        while(i <= mid && j <= right){
            if(a[i] <= a[j])
                t[k++] = a[i++];
            else
                t[k++] = a[j++];
        }
        
        while(i <= mid)
            t[k++] = a[i++];
        while(j <= right)
            t[k++] = a[j++];
        
        for(i = left; i <= right; i++)
            a[i] = t[i];
        
        return ans;
    }
}
